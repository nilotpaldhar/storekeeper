/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: "sanity.imagePaletteSwatch";
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: "sanity.imagePalette";
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: "sanity.imageDimensions";
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type Geopoint = {
	_type: "geopoint";
	lat?: number;
	lng?: number;
	alt?: number;
};

export type SocialSettings = {
	_id: string;
	_type: "socialSettings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	facebook?: string;
	twitter?: string;
	instagram?: string;
	youtube?: string;
};

export type SeoSettings = {
	_id: string;
	_type: "seoSettings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	metaTitle?: string;
	metaDesc?: string;
	metaRobotsNofollow?: boolean;
	metaRobotsNoindex?: boolean;
	shareTitle?: string;
	shareDesc?: string;
	shareGraphic?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	twitterUsername?: string;
	twitterCardType?: "summary" | "summary_large_image";
	favicon?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	faviconLegacy?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.fileAsset";
		};
		media?: unknown;
		_type: "file";
	};
	touchIcon?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
};

export type SanityFileAsset = {
	_id: string;
	_type: "sanity.fileAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type FooterSettings = {
	_id: string;
	_type: "footerSettings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	aboutCompany?: string;
	readMoreLink?: NavPage;
	copyrightText?: string;
	navBlockTitle1?: string;
	navBlockMenuItems1?: Array<
		| ({
				_key: string;
		  } & NavLink)
		| ({
				_key: string;
		  } & NavPage)
	>;
	navBlockTitle2?: string;
	navBlockMenuItems2?: Array<
		| ({
				_key: string;
		  } & NavLink)
		| ({
				_key: string;
		  } & NavPage)
	>;
	navBlockTitle3?: string;
	navBlockMenuItems3?: Array<
		| ({
				_key: string;
		  } & NavLink)
		| ({
				_key: string;
		  } & NavPage)
	>;
	infoBlockTitle?: string;
	emailAddress?: string;
	phoneNumber?: string;
};

export type HeaderSettings = {
	_id: string;
	_type: "headerSettings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	menuDesktop?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "menu";
	};
	menuMobile?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "menu";
	};
};

export type GeneralSettings = {
	_id: string;
	_type: "generalSettings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	siteTitle?: string;
	siteDescription?: string;
	siteURL?: string;
	siteLogo?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
};

export type PromoBlock = {
	_id: string;
	_type: "promoBlock";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	description?: string;
	thumbnail?: MediaImage;
	backdrop?: MediaImage;
	contentAlignment?: "left" | "right";
	price?: {
		label?: string;
		amount?: string;
	};
	link?: {
		text?: string;
		resource?:
			| {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "page";
			  }
			| {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "product";
			  }
			| {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "taxonomy";
			  }
			| {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "taxon";
			  };
	};
};

export type Menu = {
	_id: string;
	_type: "menu";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	isMegaDropdown?: boolean;
	items?: Array<
		| ({
				_key: string;
		  } & NavLink)
		| ({
				_key: string;
		  } & NavPage)
		| ({
				_key: string;
		  } & NavProduct)
		| ({
				_key: string;
		  } & NavTaxon)
		| ({
				_key: string;
		  } & NavTaxonomy)
		| ({
				_key: string;
		  } & NavDropdown)
	>;
	megaDropdowns?: Array<
		{
			_key: string;
		} & NavMegaDropdown
	>;
};

export type NotFoundPage = {
	_id: string;
	_type: "notFoundPage";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	description?: string;
	seo?: Seo;
};

export type ProductSpecification = {
	_type: "productSpecification";
	label?: string;
	value?: string;
};

export type ProductVariant = {
	_type: "productVariant";
	variantKey?: string;
	sku?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "sku";
	};
	gallery?: Array<
		{
			_key: string;
		} & MediaImage
	>;
};

export type ProductOption = {
	_type: "productOption";
	name?: string;
	values?: Array<string>;
};

export type NavMegaDropdownColumn = {
	_type: "navMegaDropdownColumn";
	heading?: string;
	items?: Array<
		| ({
				_key: string;
		  } & NavLink)
		| ({
				_key: string;
		  } & NavPage)
		| ({
				_key: string;
		  } & NavProduct)
		| ({
				_key: string;
		  } & NavTaxon)
		| ({
				_key: string;
		  } & NavTaxonomy)
	>;
};

export type NavMegaDropdown = {
	_type: "navMegaDropdown";
	label?: string;
	columns?: Array<
		{
			_key: string;
		} & NavMegaDropdownColumn
	>;
};

export type NavDropdown = {
	_type: "navDropdown";
	label?: string;
	items?: Array<
		| ({
				_key: string;
		  } & NavLink)
		| ({
				_key: string;
		  } & NavPage)
		| ({
				_key: string;
		  } & NavProduct)
		| ({
				_key: string;
		  } & NavTaxon)
		| ({
				_key: string;
		  } & NavTaxonomy)
	>;
};

export type NavTaxon = {
	_type: "navTaxon";
	label?: string;
	linkedTaxon?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "taxon";
	};
};

export type NavTaxonomy = {
	_type: "navTaxonomy";
	label?: string;
	linkedTaxonomy?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "taxonomy";
	};
};

export type NavProduct = {
	_type: "navProduct";
	label?: string;
	linkedProduct?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "product";
	};
};

export type Product = {
	_id: string;
	_type: "product";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	description?: string;
	hasVariants?: boolean;
	sku?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "sku";
	};
	options?: Array<
		{
			_key: string;
		} & ProductOption
	>;
	variants?: Array<
		{
			_key: string;
		} & ProductVariant
	>;
	taxon?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "taxon";
	};
	brand?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "brand";
	};
	gallery?: Array<
		{
			_key: string;
		} & MediaImage
	>;
	specifications?: Array<
		{
			_key: string;
		} & ProductSpecification
	>;
	relatedProducts?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "product";
	}>;
	seo?: Seo;
};

export type Brand = {
	_id: string;
	_type: "brand";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	description?: string;
	logo?: MediaImage;
	seo?: Seo;
};

export type Taxon = {
	_id: string;
	_type: "taxon";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	description?: string;
	media?: MediaImage;
	taxonomy?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "taxonomy";
	};
	parent?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "taxon";
	};
	isLeaf?: boolean;
};

export type Taxonomy = {
	_id: string;
	_type: "taxonomy";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	description?: string;
	media?: MediaImage;
};

export type Sku = {
	_id: string;
	_type: "sku";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	code?: string;
	name?: string;
	description?: string;
	imageUrl?: string;
	piecesPerPack?: number;
	weight?: number;
	unitOfWeight?: string;
	hsTariffNumber?: string;
};

export type NavPage = {
	_type: "navPage";
	label?: string;
	page?:
		| {
				_ref: string;
				_type: "reference";
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: "homePage";
		  }
		| {
				_ref: string;
				_type: "reference";
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: "page";
		  };
};

export type Page = {
	_id: string;
	_type: "page";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	pageContent?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
	seo?: Seo;
};

export type Slug = {
	_type: "slug";
	current?: string;
	source?: string;
};

export type HomePage = {
	_id: string;
	_type: "homePage";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: string;
	promoSection?: {
		hidden?: boolean;
		items?: Array<{
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			_key: string;
			[internalGroqTypeReferenceTo]?: "promoBlock";
		}>;
	};
	seo?: Seo;
};

export type NavLink = {
	_type: "navLink";
	label?: string;
	isExternal?: boolean;
	url?: string;
	path?: string;
};

export type Seo = {
	_type: "seo";
	metaTitle?: string;
	metaDesc?: string;
	shareTitle?: string;
	shareDesc?: string;
	shareGraphic?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
};

export type MediaImage = {
	_type: "mediaImage";
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	altText?: string;
};

export type SanityImageCrop = {
	_type: "sanity.imageCrop";
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityImageHotspot = {
	_type: "sanity.imageHotspot";
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageAsset = {
	_id: string;
	_type: "sanity.imageAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
	_type: "sanity.assetSourceData";
	name?: string;
	id?: string;
	url?: string;
};

export type SanityImageMetadata = {
	_type: "sanity.imageMetadata";
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| Geopoint
	| SocialSettings
	| SeoSettings
	| SanityFileAsset
	| FooterSettings
	| HeaderSettings
	| GeneralSettings
	| PromoBlock
	| Menu
	| NotFoundPage
	| ProductSpecification
	| ProductVariant
	| ProductOption
	| NavMegaDropdownColumn
	| NavMegaDropdown
	| NavDropdown
	| NavTaxon
	| NavTaxonomy
	| NavProduct
	| Product
	| Brand
	| Taxon
	| Taxonomy
	| Sku
	| NavPage
	| Page
	| Slug
	| HomePage
	| NavLink
	| Seo
	| MediaImage
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/queries/sanity/page.ts
// Variable: StaticPageSlugs
// Query: *[_type == "page"]{ "slug": slug.current }
export type StaticPageSlugsResult = Array<{
	slug: string | null;
}>;
// Variable: StaticPage
// Query: *[_type == "page" && slug.current ==  $slug] | order(_updatedAt desc) [0] {        "type": _type,        "id": _id,        title,        "content": pageContent    }
export type StaticPageResult = {
	type: "page";
	id: string;
	title: string | null;
	content: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}> | null;
} | null;
// Variable: NotFoundPage
// Query: *[_type == "notFoundPage"] | order(_updatedAt desc) [0] {        title,        description    }
export type NotFoundPageResult = {
	title: string | null;
	description: string | null;
} | null;

// Source: ./src/lib/queries/sanity/product.ts
// Variable: ProductSlugsQuery
// Query: *[_type == "product"]{ "slug": slug.current }[0...$limit]
export type ProductSlugsQueryResult = Array<{
	slug: string | null;
}>;
// Variable: ProductQuery
// Query: *[_type == "product" && slug.current ==  $slug] | order(_updatedAt desc) [0] {        "id": _id,        title,        "slug": slug.current,        description,        hasVariants,        "sku": sku->{     "id": _id,    code,    name,    description,    imageUrl,    piecesPerPack,    weight,    unitOfWeight,    hsTariffNumber },        "brand": brand->{            "id": _id,            title,            "slug": slug.current        },        "taxon": taxon->{     "id": _id,    title,    "slug": slug.current,    isLeaf },        "options": select(            defined(options) => options[]{     "refKey": _key,    name,    values },            []        ),        "variants": select(            defined(variants) => variants[]{     "refKey": _key,    variantKey,    "sku": sku->{     "id": _id,    code,    name,    description,    imageUrl,    piecesPerPack,    weight,    unitOfWeight,    hsTariffNumber },    "gallery":  select(        defined(gallery) => gallery[]{     "refKey": _key,    "image": image.asset._ref,    altText },        []    ) },            []        ),        "gallery":  select(            defined(gallery) => gallery[]{     "refKey": _key,    "image": image.asset._ref,    altText },            []        ),        "specifications": select(            defined(gallery) => specifications[]{                "refKey": _key,                label,                value            },            []        )    }
export type ProductQueryResult = {
	id: string;
	title: string | null;
	slug: string | null;
	description: string | null;
	hasVariants: boolean | null;
	sku: {
		id: string;
		code: string | null;
		name: string | null;
		description: string | null;
		imageUrl: string | null;
		piecesPerPack: number | null;
		weight: number | null;
		unitOfWeight: string | null;
		hsTariffNumber: string | null;
	} | null;
	brand: {
		id: string;
		title: string | null;
		slug: string | null;
	} | null;
	taxon: {
		id: string;
		title: string | null;
		slug: string | null;
		isLeaf: boolean | null;
	} | null;
	options:
		| Array<{
				refKey: string;
				name: string | null;
				values: Array<string> | null;
		  }>
		| Array<never>
		| null;
	variants:
		| Array<{
				refKey: string;
				variantKey: string | null;
				sku: {
					id: string;
					code: string | null;
					name: string | null;
					description: string | null;
					imageUrl: string | null;
					piecesPerPack: number | null;
					weight: number | null;
					unitOfWeight: string | null;
					hsTariffNumber: string | null;
				} | null;
				gallery:
					| Array<{
							refKey: string;
							image: string | null;
							altText: string | null;
					  }>
					| Array<never>
					| null;
		  }>
		| Array<never>
		| null;
	gallery:
		| Array<{
				refKey: string;
				image: string | null;
				altText: string | null;
		  }>
		| Array<never>
		| null;
	specifications:
		| Array<{
				refKey: string;
				label: string | null;
				value: string | null;
		  }>
		| Array<never>
		| null;
} | null;
// Variable: ProductSummaryQuery
// Query: *[_type == "product" && _id ==  $id] | order(_updatedAt desc) [0] {            "id": _id,    title,    "slug": slug.current,    description,    hasVariants,    "sku": sku->{     "id": _id,    code,    name,    description,    imageUrl,    piecesPerPack,    weight,    unitOfWeight,    hsTariffNumber },    "taxon": taxon->{     "id": _id,    title,    "slug": slug.current,    isLeaf },    "gallery":  select(        defined(gallery) => gallery[]{     "refKey": _key,    "image": image.asset._ref,    altText },        []    ),    "variants": select(        defined(variants) => variants[]{     "refKey": _key,    variantKey,    "sku": sku->{     "id": _id,    code,    name,    description,    imageUrl,    piecesPerPack,    weight,    unitOfWeight,    hsTariffNumber },    "gallery":  select(        defined(gallery) => gallery[]{     "refKey": _key,    "image": image.asset._ref,    altText },        []    ) },        []    ),    }
export type ProductSummaryQueryResult = {
	id: string;
	title: string | null;
	slug: string | null;
	description: string | null;
	hasVariants: boolean | null;
	sku: {
		id: string;
		code: string | null;
		name: string | null;
		description: string | null;
		imageUrl: string | null;
		piecesPerPack: number | null;
		weight: number | null;
		unitOfWeight: string | null;
		hsTariffNumber: string | null;
	} | null;
	taxon: {
		id: string;
		title: string | null;
		slug: string | null;
		isLeaf: boolean | null;
	} | null;
	gallery:
		| Array<{
				refKey: string;
				image: string | null;
				altText: string | null;
		  }>
		| Array<never>
		| null;
	variants:
		| Array<{
				refKey: string;
				variantKey: string | null;
				sku: {
					id: string;
					code: string | null;
					name: string | null;
					description: string | null;
					imageUrl: string | null;
					piecesPerPack: number | null;
					weight: number | null;
					unitOfWeight: string | null;
					hsTariffNumber: string | null;
				} | null;
				gallery:
					| Array<{
							refKey: string;
							image: string | null;
							altText: string | null;
					  }>
					| Array<never>
					| null;
		  }>
		| Array<never>
		| null;
} | null;
// Variable: RelatedProductsQuery
// Query: *[_type == "product" && _id ==  $id] | order(_updatedAt desc) [0] {        "relatedProducts": relatedProducts[]->{     "id": _id,    title,    "slug": slug.current,    description,    hasVariants,    "sku": sku->{     "id": _id,    code,    name,    description,    imageUrl,    piecesPerPack,    weight,    unitOfWeight,    hsTariffNumber },    "taxon": taxon->{     "id": _id,    title,    "slug": slug.current,    isLeaf },    "gallery":  select(        defined(gallery) => gallery[]{     "refKey": _key,    "image": image.asset._ref,    altText },        []    ),    "variants": select(        defined(variants) => variants[]{     "refKey": _key,    variantKey,    "sku": sku->{     "id": _id,    code,    name,    description,    imageUrl,    piecesPerPack,    weight,    unitOfWeight,    hsTariffNumber },    "gallery":  select(        defined(gallery) => gallery[]{     "refKey": _key,    "image": image.asset._ref,    altText },        []    ) },        []    ), }    }
export type RelatedProductsQueryResult = {
	relatedProducts: Array<{
		id: string;
		title: string | null;
		slug: string | null;
		description: string | null;
		hasVariants: boolean | null;
		sku: {
			id: string;
			code: string | null;
			name: string | null;
			description: string | null;
			imageUrl: string | null;
			piecesPerPack: number | null;
			weight: number | null;
			unitOfWeight: string | null;
			hsTariffNumber: string | null;
		} | null;
		taxon: {
			id: string;
			title: string | null;
			slug: string | null;
			isLeaf: boolean | null;
		} | null;
		gallery:
			| Array<{
					refKey: string;
					image: string | null;
					altText: string | null;
			  }>
			| Array<never>
			| null;
		variants:
			| Array<{
					refKey: string;
					variantKey: string | null;
					sku: {
						id: string;
						code: string | null;
						name: string | null;
						description: string | null;
						imageUrl: string | null;
						piecesPerPack: number | null;
						weight: number | null;
						unitOfWeight: string | null;
						hsTariffNumber: string | null;
					} | null;
					gallery:
						| Array<{
								refKey: string;
								image: string | null;
								altText: string | null;
						  }>
						| Array<never>
						| null;
			  }>
			| Array<never>
			| null;
	}> | null;
} | null;
// Variable: ProductBySkuCodeQuery
// Query: *[_type == "product" && ( sku->code == $skuCode || count(variants[sku->code == $skuCode]) > 0 )][0]{            "id": _id,    title,    "slug": slug.current,    description,    hasVariants,    "sku": sku->{     "id": _id,    code,    name,    description,    imageUrl,    piecesPerPack,    weight,    unitOfWeight,    hsTariffNumber },    "taxon": taxon->{     "id": _id,    title,    "slug": slug.current,    isLeaf },    "gallery":  select(        defined(gallery) => gallery[]{     "refKey": _key,    "image": image.asset._ref,    altText },        []    ),    "variants": select(        defined(variants) => variants[]{     "refKey": _key,    variantKey,    "sku": sku->{     "id": _id,    code,    name,    description,    imageUrl,    piecesPerPack,    weight,    unitOfWeight,    hsTariffNumber },    "gallery":  select(        defined(gallery) => gallery[]{     "refKey": _key,    "image": image.asset._ref,    altText },        []    ) },        []    ),    }
export type ProductBySkuCodeQueryResult = {
	id: string;
	title: string | null;
	slug: string | null;
	description: string | null;
	hasVariants: boolean | null;
	sku: {
		id: string;
		code: string | null;
		name: string | null;
		description: string | null;
		imageUrl: string | null;
		piecesPerPack: number | null;
		weight: number | null;
		unitOfWeight: string | null;
		hsTariffNumber: string | null;
	} | null;
	taxon: {
		id: string;
		title: string | null;
		slug: string | null;
		isLeaf: boolean | null;
	} | null;
	gallery:
		| Array<{
				refKey: string;
				image: string | null;
				altText: string | null;
		  }>
		| Array<never>
		| null;
	variants:
		| Array<{
				refKey: string;
				variantKey: string | null;
				sku: {
					id: string;
					code: string | null;
					name: string | null;
					description: string | null;
					imageUrl: string | null;
					piecesPerPack: number | null;
					weight: number | null;
					unitOfWeight: string | null;
					hsTariffNumber: string | null;
				} | null;
				gallery:
					| Array<{
							refKey: string;
							image: string | null;
							altText: string | null;
					  }>
					| Array<never>
					| null;
		  }>
		| Array<never>
		| null;
} | null;

// Source: ./src/lib/queries/sanity/seo.ts
// Variable: GlobalSeo
// Query: *[_type == "seoSettings"][0] {        metaTitle,        metaDesc,        shareDesc,        shareTitle,        twitterCardType,        twitterUsername,        metaRobotsNoindex,        metaRobotsNofollow,        "favicon": favicon.asset->url,        "touchIcon": touchIcon.asset->url,        "shareGraphic": shareGraphic.asset->url,        "faviconLegacy": faviconLegacy.asset->url    }
export type GlobalSeoResult = {
	metaTitle: string | null;
	metaDesc: string | null;
	shareDesc: string | null;
	shareTitle: string | null;
	twitterCardType: "summary_large_image" | "summary" | null;
	twitterUsername: string | null;
	metaRobotsNoindex: boolean | null;
	metaRobotsNofollow: boolean | null;
	favicon: string | null;
	touchIcon: string | null;
	shareGraphic: string | null;
	faviconLegacy: string | null;
} | null;
// Variable: StaticPageSeo
// Query: *[_type == "page" && slug.current ==  $slug] | order(_updatedAt desc) [0] {        seo {     metaTitle,    metaDesc,    shareTitle,    shareDesc,    "shareGraphic": shareGraphic.asset->url }    }
export type StaticPageSeoResult = {
	seo: {
		metaTitle: string | null;
		metaDesc: string | null;
		shareTitle: string | null;
		shareDesc: string | null;
		shareGraphic: string | null;
	} | null;
} | null;
// Variable: NotFoundPageSeo
// Query: *[_type == "notFoundPage"] | order(_updatedAt desc) [0] {        seo {     metaTitle,    metaDesc,    shareTitle,    shareDesc,    "shareGraphic": shareGraphic.asset->url }    }
export type NotFoundPageSeoResult = {
	seo: {
		metaTitle: string | null;
		metaDesc: string | null;
		shareTitle: string | null;
		shareDesc: string | null;
		shareGraphic: string | null;
	} | null;
} | null;
// Variable: ProductSeo
// Query: *[_type == "product" && slug.current ==  $slug] | order(_updatedAt desc) [0] {        seo {     metaTitle,    metaDesc,    shareTitle,    shareDesc,    "shareGraphic": shareGraphic.asset->url }    }
export type ProductSeoResult = {
	seo: {
		metaTitle: string | null;
		metaDesc: string | null;
		shareTitle: string | null;
		shareDesc: string | null;
		shareGraphic: string | null;
	} | null;
} | null;

// Source: ./src/lib/queries/sanity/settings.ts
// Variable: GeneralSiteSettings
// Query: *[_type == "generalSettings"][0] {        "domain": siteURL,        "title": siteTitle,        "logo": siteLogo.asset._ref,        "description": siteDescription    }
export type GeneralSiteSettingsResult = {
	domain: string | null;
	title: string | null;
	logo: string | null;
	description: string | null;
} | null;
// Variable: HeaderSettings
// Query: *[_type == "headerSettings"][0] {        "menuDesktop": menuDesktop-> {     "id": _id,    title,    isMegaDropdown,    "megaDropdownItems": megaDropdowns[] {        "refKey": _key,        label,        columns[] {            "refKey": _key,            heading,            items[] {     "refKey": _key,    "type": _type,    label,    "isExternal": coalesce(isExternal, false),    "href": select(        _type == "navLink" => coalesce(path, url, "/"),        _type == "navPage" => page->slug.current,        _type == "navProduct" => linkedProduct->slug.current,        _type == "navTaxon" => linkedTaxon->slug.current,        _type == "navTaxonomy" => linkedTaxonomy->slug.current,        "#"    ) }        }    },    "menuItems": items[] {            "refKey": _key,    "type": _type,    label,    "isExternal": coalesce(isExternal, false),    "href": select(        _type == "navLink" => coalesce(path, url, "/"),        _type == "navPage" => page->slug.current,        _type == "navProduct" => linkedProduct->slug.current,        _type == "navTaxon" => linkedTaxon->slug.current,        _type == "navTaxonomy" => linkedTaxonomy->slug.current,        "#"    ),        "dropDownItems": select(            _type == "navDropdown" => items[] {     "refKey": _key,    "type": _type,    label,    "isExternal": coalesce(isExternal, false),    "href": select(        _type == "navLink" => coalesce(path, url, "/"),        _type == "navPage" => page->slug.current,        _type == "navProduct" => linkedProduct->slug.current,        _type == "navTaxon" => linkedTaxon->slug.current,        _type == "navTaxonomy" => linkedTaxonomy->slug.current,        "#"    ) },            null        )    } },        "menuMobile": menuMobile-> {     "id": _id,    title,    isMegaDropdown,    "megaDropdownItems": megaDropdowns[] {        "refKey": _key,        label,        columns[] {            "refKey": _key,            heading,            items[] {     "refKey": _key,    "type": _type,    label,    "isExternal": coalesce(isExternal, false),    "href": select(        _type == "navLink" => coalesce(path, url, "/"),        _type == "navPage" => page->slug.current,        _type == "navProduct" => linkedProduct->slug.current,        _type == "navTaxon" => linkedTaxon->slug.current,        _type == "navTaxonomy" => linkedTaxonomy->slug.current,        "#"    ) }        }    },    "menuItems": items[] {            "refKey": _key,    "type": _type,    label,    "isExternal": coalesce(isExternal, false),    "href": select(        _type == "navLink" => coalesce(path, url, "/"),        _type == "navPage" => page->slug.current,        _type == "navProduct" => linkedProduct->slug.current,        _type == "navTaxon" => linkedTaxon->slug.current,        _type == "navTaxonomy" => linkedTaxonomy->slug.current,        "#"    ),        "dropDownItems": select(            _type == "navDropdown" => items[] {     "refKey": _key,    "type": _type,    label,    "isExternal": coalesce(isExternal, false),    "href": select(        _type == "navLink" => coalesce(path, url, "/"),        _type == "navPage" => page->slug.current,        _type == "navProduct" => linkedProduct->slug.current,        _type == "navTaxon" => linkedTaxon->slug.current,        _type == "navTaxonomy" => linkedTaxonomy->slug.current,        "#"    ) },            null        )    } }    }
export type HeaderSettingsResult = {
	menuDesktop: {
		id: string;
		title: string | null;
		isMegaDropdown: boolean | null;
		megaDropdownItems: Array<{
			refKey: string;
			label: string | null;
			columns: Array<{
				refKey: string;
				heading: string | null;
				items: Array<
					| {
							refKey: string;
							type: "navPage";
							label: string | null;
							isExternal: false;
							href: string | null;
					  }
					| {
							refKey: string;
							type: "navProduct";
							label: string | null;
							isExternal: false;
							href: string | null;
					  }
					| {
							refKey: string;
							type: "navTaxon";
							label: string | null;
							isExternal: false;
							href: string | null;
					  }
					| {
							refKey: string;
							type: "navTaxonomy";
							label: string | null;
							isExternal: false;
							href: string | null;
					  }
					| {
							refKey: string;
							type: "navLink";
							label: string | null;
							isExternal: boolean | false;
							href: string | "/";
					  }
				> | null;
			}> | null;
		}> | null;
		menuItems: Array<
			| {
					refKey: string;
					type: "navPage";
					label: string | null;
					isExternal: false;
					href: string | null;
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navProduct";
					label: string | null;
					isExternal: false;
					href: string | null;
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navTaxon";
					label: string | null;
					isExternal: false;
					href: string | null;
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navTaxonomy";
					label: string | null;
					isExternal: false;
					href: string | null;
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navLink";
					label: string | null;
					isExternal: boolean | false;
					href: string | "/";
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navDropdown";
					label: string | null;
					isExternal: false;
					href: "#";
					dropDownItems: Array<
						| {
								refKey: string;
								type: "navPage";
								label: string | null;
								isExternal: false;
								href: string | null;
						  }
						| {
								refKey: string;
								type: "navProduct";
								label: string | null;
								isExternal: false;
								href: string | null;
						  }
						| {
								refKey: string;
								type: "navTaxon";
								label: string | null;
								isExternal: false;
								href: string | null;
						  }
						| {
								refKey: string;
								type: "navTaxonomy";
								label: string | null;
								isExternal: false;
								href: string | null;
						  }
						| {
								refKey: string;
								type: "navLink";
								label: string | null;
								isExternal: boolean | false;
								href: string | "/";
						  }
					> | null;
			  }
		> | null;
	} | null;
	menuMobile: {
		id: string;
		title: string | null;
		isMegaDropdown: boolean | null;
		megaDropdownItems: Array<{
			refKey: string;
			label: string | null;
			columns: Array<{
				refKey: string;
				heading: string | null;
				items: Array<
					| {
							refKey: string;
							type: "navPage";
							label: string | null;
							isExternal: false;
							href: string | null;
					  }
					| {
							refKey: string;
							type: "navProduct";
							label: string | null;
							isExternal: false;
							href: string | null;
					  }
					| {
							refKey: string;
							type: "navTaxon";
							label: string | null;
							isExternal: false;
							href: string | null;
					  }
					| {
							refKey: string;
							type: "navTaxonomy";
							label: string | null;
							isExternal: false;
							href: string | null;
					  }
					| {
							refKey: string;
							type: "navLink";
							label: string | null;
							isExternal: boolean | false;
							href: string | "/";
					  }
				> | null;
			}> | null;
		}> | null;
		menuItems: Array<
			| {
					refKey: string;
					type: "navPage";
					label: string | null;
					isExternal: false;
					href: string | null;
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navProduct";
					label: string | null;
					isExternal: false;
					href: string | null;
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navTaxon";
					label: string | null;
					isExternal: false;
					href: string | null;
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navTaxonomy";
					label: string | null;
					isExternal: false;
					href: string | null;
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navLink";
					label: string | null;
					isExternal: boolean | false;
					href: string | "/";
					dropDownItems: null;
			  }
			| {
					refKey: string;
					type: "navDropdown";
					label: string | null;
					isExternal: false;
					href: "#";
					dropDownItems: Array<
						| {
								refKey: string;
								type: "navPage";
								label: string | null;
								isExternal: false;
								href: string | null;
						  }
						| {
								refKey: string;
								type: "navProduct";
								label: string | null;
								isExternal: false;
								href: string | null;
						  }
						| {
								refKey: string;
								type: "navTaxon";
								label: string | null;
								isExternal: false;
								href: string | null;
						  }
						| {
								refKey: string;
								type: "navTaxonomy";
								label: string | null;
								isExternal: false;
								href: string | null;
						  }
						| {
								refKey: string;
								type: "navLink";
								label: string | null;
								isExternal: boolean | false;
								href: string | "/";
						  }
					> | null;
			  }
		> | null;
	} | null;
} | null;
// Variable: FooterSettings
// Query: *[_type == "footerSettings"][0] {        "site": {            "copyright": copyrightText,            "description": aboutCompany,            "title": *[_type == "generalSettings"][0].siteTitle,            "logo": *[_type == "generalSettings"][0].siteLogo.asset._ref,            "readMore": {                "label": readMoreLink.label,                "link": readMoreLink.page->{ title, slug },            }        },        "info": {            "title": infoBlockTitle,            "email": emailAddress,            "phone": phoneNumber        },        "blockOne": {            "title": navBlockTitle1,             "menus": navBlockMenuItems1[] {     "key": _key,    "type": _type,    "isExternal": select(        defined(isExternal) => isExternal,        false    ),    "label": select(        !defined(title) && _type == "navPage" => page->title,        label    ),    "href": select(        _type == "navLink" => select(            defined(path) => path,            defined(url) => url,            null        ),        _type == "navPage" => page->slug.current,        null    ) }        },        "blockTwo": {            "title": navBlockTitle2,             "menus": navBlockMenuItems2[] {     "key": _key,    "type": _type,    "isExternal": select(        defined(isExternal) => isExternal,        false    ),    "label": select(        !defined(title) && _type == "navPage" => page->title,        label    ),    "href": select(        _type == "navLink" => select(            defined(path) => path,            defined(url) => url,            null        ),        _type == "navPage" => page->slug.current,        null    ) }        },        "blockThree": {            "title": navBlockTitle3,             "menus": navBlockMenuItems3[] {     "key": _key,    "type": _type,    "isExternal": select(        defined(isExternal) => isExternal,        false    ),    "label": select(        !defined(title) && _type == "navPage" => page->title,        label    ),    "href": select(        _type == "navLink" => select(            defined(path) => path,            defined(url) => url,            null        ),        _type == "navPage" => page->slug.current,        null    ) }        },        "social": *[_type == "socialSettings"][0]{            facebook,            twitter,            instagram,            youtube        }    }
export type FooterSettingsResult = {
	site: {
		copyright: string | null;
		description: string | null;
		title: string | null;
		logo: string | null;
		readMore: {
			label: string | null;
			link:
				| {
						title: string | null;
						slug: Slug | null;
				  }
				| {
						title: string | null;
						slug: string | null;
				  }
				| null;
		};
	};
	info: {
		title: string | null;
		email: string | null;
		phone: string | null;
	};
	blockOne: {
		title: string | null;
		menus: Array<
			| {
					key: string;
					type: "navPage";
					isExternal: false;
					label: string | null;
					href: string | null;
			  }
			| {
					key: string;
					type: "navLink";
					isExternal: boolean | false | null;
					label: string | null;
					href: string | null;
			  }
		> | null;
	};
	blockTwo: {
		title: string | null;
		menus: Array<
			| {
					key: string;
					type: "navPage";
					isExternal: false;
					label: string | null;
					href: string | null;
			  }
			| {
					key: string;
					type: "navLink";
					isExternal: boolean | false | null;
					label: string | null;
					href: string | null;
			  }
		> | null;
	};
	blockThree: {
		title: string | null;
		menus: Array<
			| {
					key: string;
					type: "navPage";
					isExternal: false;
					label: string | null;
					href: string | null;
			  }
			| {
					key: string;
					type: "navLink";
					isExternal: boolean | false | null;
					label: string | null;
					href: string | null;
			  }
		> | null;
	};
	social: {
		facebook: string | null;
		twitter: string | null;
		instagram: string | null;
		youtube: string | null;
	} | null;
} | null;

// Source: ./src/lib/resources/categories/services/index.ts
// Variable: TaxonById
// Query: *[_type == "taxon" && _id == $id][0]{        "id": _id,        title,        "slug": slug.current,        "parentId": parent->_id    }
export type TaxonByIdResult = {
	id: string;
	title: string | null;
	slug: string | null;
	parentId: string | null;
} | null;
// Variable: TaxonBySlug
// Query: *[_type == "taxon" && slug.current ==  $slug] | order(_updatedAt desc) [0] {        "id": _id,        title,        "slug": slug.current,        "taxonomy": taxonomy->{            "id": _id,              title,            "slug": slug.current,        }    }
export type TaxonBySlugResult = {
	id: string;
	title: string | null;
	slug: string | null;
	taxonomy: {
		id: string;
		title: string | null;
		slug: string | null;
	} | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
	interface SanityQueries {
		'\n    *[_type == "page"]{ "slug": slug.current }\n': StaticPageSlugsResult;
		'\n    *[_type == "page" && slug.current ==  $slug] | order(_updatedAt desc) [0] {\n        "type": _type,\n        "id": _id,\n        title,\n        "content": pageContent\n    }\n': StaticPageResult;
		'\n    *[_type == "notFoundPage"] | order(_updatedAt desc) [0] {\n        title,\n        description\n    }\n': NotFoundPageResult;
		'\n    *[_type == "product"]{ "slug": slug.current }[0...$limit]\n': ProductSlugsQueryResult;
		'\n    *[_type == "product" && slug.current ==  $slug] | order(_updatedAt desc) [0] {\n        "id": _id,\n        title,\n        "slug": slug.current,\n        description,\n        hasVariants,\n        "sku": sku->{ \n    "id": _id,\n    code,\n    name,\n    description,\n    imageUrl,\n    piecesPerPack,\n    weight,\n    unitOfWeight,\n    hsTariffNumber\n },\n        "brand": brand->{\n            "id": _id,\n            title,\n            "slug": slug.current\n        },\n        "taxon": taxon->{ \n    "id": _id,\n    title,\n    "slug": slug.current,\n    isLeaf\n },\n        "options": select(\n            defined(options) => options[]{ \n    "refKey": _key,\n    name,\n    values\n },\n            []\n        ),\n        "variants": select(\n            defined(variants) => variants[]{ \n    "refKey": _key,\n    variantKey,\n    "sku": sku->{ \n    "id": _id,\n    code,\n    name,\n    description,\n    imageUrl,\n    piecesPerPack,\n    weight,\n    unitOfWeight,\n    hsTariffNumber\n },\n    "gallery":  select(\n        defined(gallery) => gallery[]{ \n    "refKey": _key,\n    "image": image.asset._ref,\n    altText\n },\n        []\n    )\n },\n            []\n        ),\n        "gallery":  select(\n            defined(gallery) => gallery[]{ \n    "refKey": _key,\n    "image": image.asset._ref,\n    altText\n },\n            []\n        ),\n        "specifications": select(\n            defined(gallery) => specifications[]{\n                "refKey": _key,\n                label,\n                value\n            },\n            []\n        )\n    }\n': ProductQueryResult;
		'\n    *[_type == "product" && _id ==  $id] | order(_updatedAt desc) [0] {\n        \n    "id": _id,\n    title,\n    "slug": slug.current,\n    description,\n    hasVariants,\n    "sku": sku->{ \n    "id": _id,\n    code,\n    name,\n    description,\n    imageUrl,\n    piecesPerPack,\n    weight,\n    unitOfWeight,\n    hsTariffNumber\n },\n    "taxon": taxon->{ \n    "id": _id,\n    title,\n    "slug": slug.current,\n    isLeaf\n },\n    "gallery":  select(\n        defined(gallery) => gallery[]{ \n    "refKey": _key,\n    "image": image.asset._ref,\n    altText\n },\n        []\n    ),\n    "variants": select(\n        defined(variants) => variants[]{ \n    "refKey": _key,\n    variantKey,\n    "sku": sku->{ \n    "id": _id,\n    code,\n    name,\n    description,\n    imageUrl,\n    piecesPerPack,\n    weight,\n    unitOfWeight,\n    hsTariffNumber\n },\n    "gallery":  select(\n        defined(gallery) => gallery[]{ \n    "refKey": _key,\n    "image": image.asset._ref,\n    altText\n },\n        []\n    )\n },\n        []\n    ),\n\n    }\n': ProductSummaryQueryResult;
		'\n    *[_type == "product" && _id ==  $id] | order(_updatedAt desc) [0] {\n        "relatedProducts": relatedProducts[]->{ \n    "id": _id,\n    title,\n    "slug": slug.current,\n    description,\n    hasVariants,\n    "sku": sku->{ \n    "id": _id,\n    code,\n    name,\n    description,\n    imageUrl,\n    piecesPerPack,\n    weight,\n    unitOfWeight,\n    hsTariffNumber\n },\n    "taxon": taxon->{ \n    "id": _id,\n    title,\n    "slug": slug.current,\n    isLeaf\n },\n    "gallery":  select(\n        defined(gallery) => gallery[]{ \n    "refKey": _key,\n    "image": image.asset._ref,\n    altText\n },\n        []\n    ),\n    "variants": select(\n        defined(variants) => variants[]{ \n    "refKey": _key,\n    variantKey,\n    "sku": sku->{ \n    "id": _id,\n    code,\n    name,\n    description,\n    imageUrl,\n    piecesPerPack,\n    weight,\n    unitOfWeight,\n    hsTariffNumber\n },\n    "gallery":  select(\n        defined(gallery) => gallery[]{ \n    "refKey": _key,\n    "image": image.asset._ref,\n    altText\n },\n        []\n    )\n },\n        []\n    ),\n }\n    }\n': RelatedProductsQueryResult;
		'\n    *[_type == "product" && ( sku->code == $skuCode || count(variants[sku->code == $skuCode]) > 0 )][0]{\n        \n    "id": _id,\n    title,\n    "slug": slug.current,\n    description,\n    hasVariants,\n    "sku": sku->{ \n    "id": _id,\n    code,\n    name,\n    description,\n    imageUrl,\n    piecesPerPack,\n    weight,\n    unitOfWeight,\n    hsTariffNumber\n },\n    "taxon": taxon->{ \n    "id": _id,\n    title,\n    "slug": slug.current,\n    isLeaf\n },\n    "gallery":  select(\n        defined(gallery) => gallery[]{ \n    "refKey": _key,\n    "image": image.asset._ref,\n    altText\n },\n        []\n    ),\n    "variants": select(\n        defined(variants) => variants[]{ \n    "refKey": _key,\n    variantKey,\n    "sku": sku->{ \n    "id": _id,\n    code,\n    name,\n    description,\n    imageUrl,\n    piecesPerPack,\n    weight,\n    unitOfWeight,\n    hsTariffNumber\n },\n    "gallery":  select(\n        defined(gallery) => gallery[]{ \n    "refKey": _key,\n    "image": image.asset._ref,\n    altText\n },\n        []\n    )\n },\n        []\n    ),\n\n    }\n': ProductBySkuCodeQueryResult;
		'\n    *[_type == "seoSettings"][0] {\n        metaTitle,\n        metaDesc,\n        shareDesc,\n        shareTitle,\n        twitterCardType,\n        twitterUsername,\n        metaRobotsNoindex,\n        metaRobotsNofollow,\n        "favicon": favicon.asset->url,\n        "touchIcon": touchIcon.asset->url,\n        "shareGraphic": shareGraphic.asset->url,\n        "faviconLegacy": faviconLegacy.asset->url\n    }\n': GlobalSeoResult;
		'\n    *[_type == "page" && slug.current ==  $slug] | order(_updatedAt desc) [0] {\n        seo { \n    metaTitle,\n    metaDesc,\n    shareTitle,\n    shareDesc,\n    "shareGraphic": shareGraphic.asset->url\n }\n    }\n': StaticPageSeoResult;
		'\n    *[_type == "notFoundPage"] | order(_updatedAt desc) [0] {\n        seo { \n    metaTitle,\n    metaDesc,\n    shareTitle,\n    shareDesc,\n    "shareGraphic": shareGraphic.asset->url\n }\n    }\n': NotFoundPageSeoResult;
		'\n    *[_type == "product" && slug.current ==  $slug] | order(_updatedAt desc) [0] {\n        seo { \n    metaTitle,\n    metaDesc,\n    shareTitle,\n    shareDesc,\n    "shareGraphic": shareGraphic.asset->url\n }\n    }\n': ProductSeoResult;
		'\n    *[_type == "generalSettings"][0] {\n        "domain": siteURL,\n        "title": siteTitle,\n        "logo": siteLogo.asset._ref,\n        "description": siteDescription\n    }\n': GeneralSiteSettingsResult;
		'\n    *[_type == "headerSettings"][0] {\n        "menuDesktop": menuDesktop-> { \n    "id": _id,\n    title,\n    isMegaDropdown,\n    "megaDropdownItems": megaDropdowns[] {\n        "refKey": _key,\n        label,\n        columns[] {\n            "refKey": _key,\n            heading,\n            items[] { \n    "refKey": _key,\n    "type": _type,\n    label,\n    "isExternal": coalesce(isExternal, false),\n    "href": select(\n        _type == "navLink" => coalesce(path, url, "/"),\n        _type == "navPage" => page->slug.current,\n        _type == "navProduct" => linkedProduct->slug.current,\n        _type == "navTaxon" => linkedTaxon->slug.current,\n        _type == "navTaxonomy" => linkedTaxonomy->slug.current,\n        "#"\n    )\n }\n        }\n    },\n    "menuItems": items[] {\n        \n    "refKey": _key,\n    "type": _type,\n    label,\n    "isExternal": coalesce(isExternal, false),\n    "href": select(\n        _type == "navLink" => coalesce(path, url, "/"),\n        _type == "navPage" => page->slug.current,\n        _type == "navProduct" => linkedProduct->slug.current,\n        _type == "navTaxon" => linkedTaxon->slug.current,\n        _type == "navTaxonomy" => linkedTaxonomy->slug.current,\n        "#"\n    )\n,\n        "dropDownItems": select(\n            _type == "navDropdown" => items[] { \n    "refKey": _key,\n    "type": _type,\n    label,\n    "isExternal": coalesce(isExternal, false),\n    "href": select(\n        _type == "navLink" => coalesce(path, url, "/"),\n        _type == "navPage" => page->slug.current,\n        _type == "navProduct" => linkedProduct->slug.current,\n        _type == "navTaxon" => linkedTaxon->slug.current,\n        _type == "navTaxonomy" => linkedTaxonomy->slug.current,\n        "#"\n    )\n },\n            null\n        )\n    }\n },\n        "menuMobile": menuMobile-> { \n    "id": _id,\n    title,\n    isMegaDropdown,\n    "megaDropdownItems": megaDropdowns[] {\n        "refKey": _key,\n        label,\n        columns[] {\n            "refKey": _key,\n            heading,\n            items[] { \n    "refKey": _key,\n    "type": _type,\n    label,\n    "isExternal": coalesce(isExternal, false),\n    "href": select(\n        _type == "navLink" => coalesce(path, url, "/"),\n        _type == "navPage" => page->slug.current,\n        _type == "navProduct" => linkedProduct->slug.current,\n        _type == "navTaxon" => linkedTaxon->slug.current,\n        _type == "navTaxonomy" => linkedTaxonomy->slug.current,\n        "#"\n    )\n }\n        }\n    },\n    "menuItems": items[] {\n        \n    "refKey": _key,\n    "type": _type,\n    label,\n    "isExternal": coalesce(isExternal, false),\n    "href": select(\n        _type == "navLink" => coalesce(path, url, "/"),\n        _type == "navPage" => page->slug.current,\n        _type == "navProduct" => linkedProduct->slug.current,\n        _type == "navTaxon" => linkedTaxon->slug.current,\n        _type == "navTaxonomy" => linkedTaxonomy->slug.current,\n        "#"\n    )\n,\n        "dropDownItems": select(\n            _type == "navDropdown" => items[] { \n    "refKey": _key,\n    "type": _type,\n    label,\n    "isExternal": coalesce(isExternal, false),\n    "href": select(\n        _type == "navLink" => coalesce(path, url, "/"),\n        _type == "navPage" => page->slug.current,\n        _type == "navProduct" => linkedProduct->slug.current,\n        _type == "navTaxon" => linkedTaxon->slug.current,\n        _type == "navTaxonomy" => linkedTaxonomy->slug.current,\n        "#"\n    )\n },\n            null\n        )\n    }\n }\n    }\n': HeaderSettingsResult;
		'\n    *[_type == "footerSettings"][0] {\n        "site": {\n            "copyright": copyrightText,\n            "description": aboutCompany,\n            "title": *[_type == "generalSettings"][0].siteTitle,\n            "logo": *[_type == "generalSettings"][0].siteLogo.asset._ref,\n            "readMore": {\n                "label": readMoreLink.label,\n                "link": readMoreLink.page->{ title, slug },\n            }\n        },\n        "info": {\n            "title": infoBlockTitle,\n            "email": emailAddress,\n            "phone": phoneNumber\n        },\n        "blockOne": {\n            "title": navBlockTitle1, \n            "menus": navBlockMenuItems1[] { \n    "key": _key,\n    "type": _type,\n    "isExternal": select(\n        defined(isExternal) => isExternal,\n        false\n    ),\n    "label": select(\n        !defined(title) && _type == "navPage" => page->title,\n        label\n    ),\n    "href": select(\n        _type == "navLink" => select(\n            defined(path) => path,\n            defined(url) => url,\n            null\n        ),\n        _type == "navPage" => page->slug.current,\n        null\n    )\n }\n        },\n        "blockTwo": {\n            "title": navBlockTitle2, \n            "menus": navBlockMenuItems2[] { \n    "key": _key,\n    "type": _type,\n    "isExternal": select(\n        defined(isExternal) => isExternal,\n        false\n    ),\n    "label": select(\n        !defined(title) && _type == "navPage" => page->title,\n        label\n    ),\n    "href": select(\n        _type == "navLink" => select(\n            defined(path) => path,\n            defined(url) => url,\n            null\n        ),\n        _type == "navPage" => page->slug.current,\n        null\n    )\n }\n        },\n        "blockThree": {\n            "title": navBlockTitle3, \n            "menus": navBlockMenuItems3[] { \n    "key": _key,\n    "type": _type,\n    "isExternal": select(\n        defined(isExternal) => isExternal,\n        false\n    ),\n    "label": select(\n        !defined(title) && _type == "navPage" => page->title,\n        label\n    ),\n    "href": select(\n        _type == "navLink" => select(\n            defined(path) => path,\n            defined(url) => url,\n            null\n        ),\n        _type == "navPage" => page->slug.current,\n        null\n    )\n }\n        },\n        "social": *[_type == "socialSettings"][0]{\n            facebook,\n            twitter,\n            instagram,\n            youtube\n        }\n    }\n': FooterSettingsResult;
		'\n    *[_type == "taxon" && _id == $id][0]{\n        "id": _id,\n        title,\n        "slug": slug.current,\n        "parentId": parent->_id\n    }\n': TaxonByIdResult;
		'\n    *[_type == "taxon" && slug.current ==  $slug] | order(_updatedAt desc) [0] {\n        "id": _id,\n        title,\n        "slug": slug.current,\n        "taxonomy": taxonomy->{\n            "id": _id,  \n            title,\n            "slug": slug.current,\n        }\n    }\n': TaxonBySlugResult;
	}
}
